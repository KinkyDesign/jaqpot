/**
 * Jaqpot API
 * Jaqpot v4 (Quattro) is the 4th version of a YAQP, a RESTful web service which can be used to train machine learning models and use them to obtain toxicological predictions for given chemical compounds or engineered nano materials. The project is written in Java8 and JEE7.
 *
 * OpenAPI spec version: 4.0.3
 * Contact: hampos@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType } from '@angular/http';
import { map, filter, catchError, mergeMap, tap } from 'rxjs/operators';
import { Observable , of} from 'rxjs';
import '../rxjs-operators';

import { Algorithm } from '../model/algorithm';
import { ErrorReport } from '../model/errorReport';
import { Task } from '../model/task';

// import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Config } from '../../config/config';
import { SessionService } from '../../session/session.service';
import { DialogsService } from '../../dialogs/dialogs.service';
import { OidcSecurityService } from 'angular-auth-oidc-client';
import { User } from '../model/user';
import { BaseClient } from './base.client';
import { Organization } from '../model/organization';
import { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';

@Injectable()
export class OrganizationService extends BaseClient<Organization>{
    
    _privateBasePath:string;
    private orgnanization:Organization;
    _organizationBase:string = "/organization/"

    constructor(http: HttpClient,
        public sessionServise:SessionService,
        public dialogsService:DialogsService,
        public oidcSecurityService: OidcSecurityService){
            super(http, dialogsService, oidcSecurityService, "/organization/")
        }

    
    // public updateOrganizationById(id:string, user:User): Observable<User> {
    //     let params = new URLSearchParams();
            
    //     let headers = new Headers({'Content-Type':'application/json'});
    //     const token = this.oidcSecurityService.getToken();
    //     const tokenValue = 'Bearer ' + token;
    //     headers.set('Authorization', tokenValue);
    
    //     return this.http.put(this._userBase + id, user ,{ headers: headers, search: params }).pipe(
    //         map((res : Response) => {  
    //             return res.json()            
    //         }),catchError( err => this.dialogsService.onError(err) ));
    // }

}